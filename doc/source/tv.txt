TV module
*********

Introduction
++++++++++++

tv is a module that provide an enhanced image display tool built on
top of the basic functionality of a matplotlib figure. The tv tool is
an object that displays images and also allows the user to get input
from the display.

It can take as input either a numpy array, an astropy NDData/CCDData or a FITS HDU object (e.g., from
astropy.io.fits), and will display it in the window. Pixel and value readout
is provided. Normal matplotlib options/buttons (zoom/pan) are available.
For FITS input, WCS as well as pixel locations are given, as is the OBJECT
information.  Two plot windows are created for use with some built-in
functions (row and column plots, radial profiles).

Four images are stored internally, allowing for rapid cycling (blinking)
between them using the '-' and '+/=' keys.

A method is provided to allow the user to retrieve the location of a keystroke
event in the window along with the key that was pressed.

Installation
++++++++++++

The tv module is part of pyvista,  is available at http://github.com/holtzmanjon/pyvista
To load it:

.. code-block:: python

   from pyvista import tv

If the autopy package is available it will be loaded: this functionality is
required for interactive functions that move the cursor.

Usage
+++++

A display tool is created when a TV object is instantiated, e.g.

.. code-block:: python

   display = tv.TV()

In this way, multiple displays can be used if desired.

Once the TV object is created, images are displayed using the tv() function, e.g.

.. code-block:: python

   display.tv(image)

where image is one of the input data types. By default, the image is displayed
using greyscale (colormap "Greys_r") with an automatically determined stretch; however, the display
scaling can be set explicitly using the min= and max= keywords, and the cmap=
keyword can be used to specify a different colormap. If the input data type
is an astropy NDData/CCDData object, then the sn= keyword can be used to display
the S/N image (data extension divided by uncertainty dimension).

Given a TV object with image data loaded, various asynchronous functions are
available in the main display window:

  |  left mouse  : zoom in, centered on cursor
  |  center mouse: zoom out, centered on cursor
  |  right mouse : pan, center to cursor
  |  r           : redraw at default zoom
  |  +/=         : toggle to next image in stack
  |  -           : toggle to previous image in stack
  |  arrow keys  : move single image pixels
  |  a           : toggle axes on/off
  |  h/?         : print this help

Several synchronous (waits for input) methods are also available:

  |  imexam(size=11,fwhm=5,scale=1,pafixed=False)  : draws radial profiles and fits Gaussian around cursor position when key is hit
  |  tvmark() :   returns (x,y,key) when a key is hit at (data) position (x,y)
  |  clear() :   clears the display
  |  tvbox(x,y,box=None,size=3,color='m') : displays square of specified size at input position (or pyvista box object) with specified color
  |  tvvcirc(x,y,rad=3,color='m') : displays circle of specified size and color at input position
  |  tvclear() :  clears graphics patches from display
  |  flip() :  toggles vertical flip of displays (default starts with origin in lower left)


Module functions
++++++++++++++++
.. automodule:: pyvista.tv
   :members:




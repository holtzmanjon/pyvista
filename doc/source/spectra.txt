SPECTRA module
**************

spectra is a module that implements some classes/tools for handling
basic spectral data reduction: tracing and extraction of spectra, 
wavelength calibration, and flux calibration.
The routines allow for both longslit data, multiobject data, echelle data, and a
combination (multiple orders with longslit, or multiple slitlets).

Data are read and processed using pyvista Data structures, which carry along both 
the image data and an associated uncertainty array, and allow wavelength,
response, and sky attributes to be added.

The routines are implemented with three basic classes, the Trace object,
the WaveCal object, and the FluxCal.  In more detail:

Trace 
=====

The Trace object is used to store functional forms and locations of spectral
traces. It supports multiple traces per image, e.g., in a long-slit 
spectrograph, a multiobject spectrograph (fiber or slitlets), or a multiorder 
spectrograph.

Trace objects can be defined from one image and used on other images, 
allowing for small global shifts of the traces in the spatial direction. 
They can be saved and read from disk as FITS files.

To create a trace from scratch, instantiate a trace object with 
rows= (to specify window, i.e. length of slit), 
lags= (to specify how far search can extend for translation of trace),
degree= (to specify degree of polynomial for fit to trace), and
rad= (to specify a radius in pixels to use for centroiding a trace).
Internally, pyvista spectral routines will assume that wavelength runs
horizontally, i.e. across columns, so if your spectrograph has vertical
spectra, set transpose=True in the Trace object.

Alternatively, you can load a saved Trace object from disk by
instantiating using the file= keyword (use file='?' to see a listing
of files distributed with the package).

To make the trace, the code will generally start at the center of the
image in the wavelength direction (unless the sc0 attribute is set to
another value), centroid the spectrum there, then work in both directions
to get a centroid each pixel (or every skip pixels if the skip= keyword
is given); the centroid for each wavelength is used as a starting guess
for the subsequent wavelength if the peak is above a S/N threshold), 
Finally, a function will be fit to the derived centroids and
the model (currently astropy Polynomial1D) wll be stored
in the trace structure.

To make a trace manually use the trace(spectrum,row) method, where row is the starting
guess for the spatial postion at the center of the spectrum (or sc0). 
You can use the findpeak() method to find object(s) automatically and
pass the returned value(s) to trace(). Alternatively, you can use find() which
will cross-correlate a saved trace crossection and identify a location from the
highest peak; if you specify inter=True with find(), then the image will be displayed
(display= must also be specified to give the TV object to use), and you can mark the
location interactively.  If row is a list (i.e. for multiple objects or orders), then 
multiple traces will be made.  

For spectrographs where the traces are relatively stable in location (e.g.
multiple orders), a saved model can be convenient to use to remake traces.
To retrace, use the retrace(spectrum) method. This will do a cross-correlation 
of a saved cross-section with the input spectrum to determine a shift, 
then will use that as a starting location to retrace.

The default method for finding the trace locations is to use a centroid. If you
add gaussian=True to trace(), then the center will be determined using a Gaussian
fit to the profile. This will also determine the derived Gaussian widths and fit
a polynomial model to these, which is required if one wants to do optimal extraction
using a Gaussian profile.

If you pass a pyvista TV object with the display= keyword, the display will show
the location of the calculated centers, and the polynomial fit to these: centers
in red are those rejected during the fiting process. You will need to hit the
space bar in the display window to continue.

Extraction is done using the extract(spectrum,rad=,[back=[[b1,b2],[b3,b4]]) 
method, which uses boxcar extraction with the specified radius. 

Optionally, a background value as determined from one or more background
windows can be subtracted, where the window locations are specified in 
pixels relative to the object trace position. Note that if there is
non-negligible line curvature that this can lead to poor subtraction of
sky emission lines. In this case, you might want to determine a 2D
wavelength solution (see below), and resample the sky spectra to the
wavelength scale of the object (or to some other wavelength scale) 
before subtraction.

If you pass a pyvista TV object with the display= keyword, then the display will
show the location of the extraction and background windows (if any).
You will need to hit the space bar in the display window to continue.

Attributes
   - type : type of astropy model to use for trace shape (currently, just Polynomial1D)
   - model : array of astropy models for each trace
   - degree : polynomial degree for model fit
   - rad : radius in pixels to use for calculating centroid
   - sc0 : starting column for trace, will work both directions from here
   - spectrum : reference spatial slice at sc0
   - pix0 : derived shift of current image relative to reference
   - lags : array of lags to try when finding object location
   - transpose : boolean for whether axes need transposing to put spectra along rows
   - rows : range of slit length
   - index : identification for each trace

Methods (for details, see docstrings below)
  - find()
  - findpeak()
  - retrace()
  - trace()
  - extract()
  - extract2d()

WaveCal
=======

Wavelength calibration proceeds as follows:

If there is a previous WaveCal object with wavelength calibration for this 
instrument, that can be used to facilitate wavelength calibration. A previous
WaveCal object can be saved with the write() method. What is saved is the
type and degree of the wavelength model, a list of pixel and wavelengths of
identified lines, and the spectrum from which these were identified.  
A WaveCal object can be instantiated using the file= keyword to read in 
a previous WaveCal (use file='?' to see a listing
of files distributed with the package).

Given this WaveCal instantiation, identify() is called to identify and fit
a wavelength solution. This is achieved as follows:

   1. if input wav array/image is specified, use this to identify lines
   2. if WaveCal object has an associated spectrum, use cross correlation
      to identify shift of input spectrum, then use previous solution
      to create a wavelength array. Cross correlation lags to try
      are specified by lags=range(dx1,dx2), default range(-300,300)
   3. if inter==True, prompt user to identify 2 lines
   4. use header cards DISPDW and DISPWC for dispersion and wave center
      or as specified by input disp=[dispersion] and wref=[lambda,pix]

Given the wavelength guess array, identify() will identify lines from 
input file of lamp/reference wavelengths, or, if no file given, the lines 
saved in the WaveCal structure.

Lines are identified by looking for peaks within rad pixels of initial guess
that have S/N exceeded the threshold given by thresh= keyword (default 100).
Pixel centers of the lines are determined by a Gaussian fit to the line; the
derived line widths are saved in a fwhm attribute along with the line centers.

After line identification, fit() is automatically called, unless fit=False.
During the fit, if plot=True, the user can remove discrepant lines (use 'n'
to remove line nearest to cursor in wavelength, 'l' to remove all lines to
left, 'r' to remove all lines to right); removal is done by setting the weights
of these lines to zero in the WaveCal structure. After removing lines to get a 
better initial solution, it may be desirable to re-enable these lines to 
see if they can be more correctly identified given a better initial wavelength
guess.

An example, given an extracted spectrum spec, might proceed as follows:

.. code-block:: python

   wav=spectra.WaveCal('KOSMOS/KOSMOS_blue_waves.fits')
   wav.identify(spec,plot=True)
   # if you removed a bunch of lines, especally at short and long wavelength ends,
   #   you can try to recover them using your revised solution:
   wav.weights[:] = 1.
   wav.identify(spec,plot=True,lags=range(-50,50))


If there is no previous WaveCal, a new WaveCal can be instantiated, specifing
the type and degree of the model. Lines are identified given some estimate
of the wavelength solution, either from an input wavelength array (wav= keyword)
or from a [wave,pix] pair plus a dispersion (wref= and disp=) keyword, as 
described above. This solution will be used to try to find lines as
specified in an input reference line file (file=) : a centroid around
the input position of width given by the rad= keyword is computed.

One you have an acceptable wavelength solution, it can be used to create
a wavelength array and transferred to the wave attribute of an object using
the add_wave() method.

The WaveCal object also includes a skyline() method, which can be used to
adjust the wavelength solution for an object based on sky emission lines. 
The object should already have a wavelength solution, e.g. from arcs, attached.
The skyline() routine will use this to look for skylines and then redo the
wavelength solution, but only allowing for the 0th order term to change, 
i.e. a constant wavelength shift. If multiple sky lines across a broad
wavelength range are available, you can also fit for a dispersion change
if you set linear=True.

FluxCal
=======

The FluxCal object allows for the creation of a spectral response
curve given observations of one or more flux standard stars. It also
includes a spectral extinction correction using a set of mean extinction
coefficients as a function of wavelength. The derived response curve
can be applied to an input spectrum to provide a flux-calibrated
spectrum. The accuracy of the flux calibration may be limited by
differential refraction effects in either the calibration stars or
the object itself. The accuracy of the absolute calibration is further
limited by light losses outside the slit.

A FluxCal object is instantiated, specifying either the polynomial degree (degree=)
to be used for the response curve fit, or else you can use a median or mean
of the observed flux standards (degree=-1). Observed 1d (i.e., extracted) 
spectra of spectrophotometric stars are added using the 
addstar(spectrum, waves, file=) method, where the input file gives
the true fluxes as a function of wavelength; libraries of standard
star spectra from ESO are included. Alternatively, you can specify the
flux of the standard star using the stdflux= keyword, passing an astropy
Table with (at least) columns wave, flux, and bin.
The observed spectrum is corrected
for extinction and saved, along with the true spectrum. 

Once or or more stars have been
loaded, a response curve is derived using the response() method.
If degree>=0 is used,  a polynomial is fit to the
logarithm of the ratio of the extinction-corrected observed to true 
fluxes, allowing for an independent scale factor for each star. 
If degree<0, then a median of the flux curves is used, or a mean if 
mean=True is passed to response(). A median is probably only appropriate
if multiple flux standards have been observed in a single observation
(i.e., a multiobject spectrograph), otherwise a mean is probably more
useful, since it is probably unlikely that all of the individual star
response curves will be at the same level, given variations in
throughput from exposure to exposure and the assumption of a mean
extinction curve.

Given the response curve, input spectra can be corrected for extinction
and instrumental response using the correct() method.

spectra functions
=================

.. automodule:: pyvista.spectra
   :members:
   :member-order: bysource


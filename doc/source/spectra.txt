SPECTRA module
**************

spectra is a module that implements some classes/tools for handling
basic spectral data reduction: extraction of spectra and wavelength calibration.
The routines allow for both longslit data, multiobject data, echelle data, and a
combination (multiple orders with longslit, or multiple slitlets).

Data are read and processed using NDData structures, which carry along both 
the image data and an associated uncertainty array.

The routines are implemented with two basic classes, the Trace object and
the WaveCal object.  In more detail:

Trace 
=====

The Trace object is used to store functional forms and locations of spectral
traces. It supports multiple traces per image, e.g., for a multiobject spectrograph.

Create a trace from scratch: instantiate a trace object with an initial model, rows= (to specify window), lags= (to specify how far search can extend for 
translation of trace).

To retrace, use trace.retrace(spectrum). This will do a cross-correlation 
of saved cross-section with input spectrum to determine a shift, then will
use that as a starting location to retrace.

To trace using fixed trace, use trace.trace(spectrum)

To extract, use trace.extract(spectrum,rad=,[back=[[b1,b2],[b3,b4]])

Attributes
   - type : type of astropy model to use for trace shape (currently, just Polynomial1D)
   - model : array of astropy models for each trace
   - degree : polynomial degree
   - rad : radius in pixels to use for calculating centroid
   - sc0 : starting column for trace, will work both directions from here
   - spectrum : reference spatial slice at sc0
   - pix0 : derived shift of current image relative to reference
   - lags : array of lags to try when finding object location
   - transpose : boolean for whether axes need transposing to put spectra along rows
   - rows : range of slit length
   - index : identification for each trace


Methods:
  - find
  - findpeak
  - retrace
  - trace
  - extract
  - extract2d

WaveCal
=======

Wavelength calibration proceeds as follows:

If there is a previous WaveCal object with wavelength calibration for this 
instrument, that can be used to facilitate wavelength calibration. A previous
WaveCal object can be saved with the write() method. What is saved is the
type and degree of the wavelength model, a list of pixel and wavelengths of
identified lines, and the spectrum from which these were identified.

A new WaveCal object can be instantiated using the file= keyword to read in 
the previous WaveCal.

Given this WaveCal instantiation, identify() is called to identify and fit
a wavelength solution. This is achieved as follows:

   1. if input wav array/image is specified, use this to identify lines
   2. if WaveCal object as associated spectrum, use cross correlation
      to identify shift of input spectrum, then use previous solution
      to create a wavelength array. Cross correlation lags to try
      are specified by lags=range(dx1,dx2), default range(-300,300)
   3. if inter==True, prompt user to identify 2 lines
   4. use header cards DISPDW and DISPWC for dispersion and wave center
      or as specified by input disp=[dispersion] and wref=[lambda,pix]

Given the wavelength guess array, identify() will identify lines from 
input file of lamp/reference wavelengths, or, if no file given, the lines 
saved in the WaveCal structure.

Lines are identified by looking for peaks within rad pixels of initial guess
that have S/N exceeded the threshold given by thresh= keyword (default 100).

After line identification, fit() is automatically called, unless fit=False.
During the fit, if plot=True, the user can remove discrepant lines (use 'n'
to remove line nearest to cursor in wavelength, 'l' to remove all lines to
left, 'r' to remove all lines to right; removal is done by setting the weights
of these lines to zero in the WaveCal structure. After removing lines to get a 
better initial solution, it may be desirable to re-enable these lines to 
see if they can be more correctly identified gibven a better initial wavelength
guess.

An example, given an extracted spectrum spec, might proceed as follows:

.. code-block:: python

   wav=spectra.WaveCal(files='KOSMOS/KOSMOS_blue_waves.fits')
   wav.identify(spec,plot=True)
   # if you removed a bunch of lines, especally at short and long wavelength ends,
   #   you can try to recover them using your revised solution:
   wav.weights[:] = 1.
   wav.identify(spec,plot=True,lags=range(-50,50))


If there is no previous WaveCal, a new WaveCal can be instantiated, specifing
the type and degree of the model. Lines are identified given some estimate
of the wavelength solution, either from an input wavelength array (wav= keyword)
or from a [wave,pix] pair plus a dispersion (wref= and disp=) keyword, as 
described above. This solution will be used to try to find lines: a centroid 
around the input position of width given by the rad= keyword is computed. 


spectra functions
=================

.. automodule:: pyvista.spectra
   :members:
   :member-order: bysource

